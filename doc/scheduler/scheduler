#!/usr/bin/env python3
from datetime import datetime
import pytz
import json
import time
import requests

LOCAL_TIMEZONE = pytz.timezone('Europe/Berlin')
SLEEP_DURATION = 120
INTERCOM_ADDRESS = '192.168.0.165'
LAST_STATE = None


def get_local_time():
    original_time = datetime.now()
    return original_time.astimezone(LOCAL_TIMEZONE)


on_hours_by_day_of_week = {
    # Monday is #0 and Sunday is 6
    0: {'start': (9, 0),
        'end': (21, 0), },
    1: {'start': (9, 0),
        'end': (21, 0), },
    2: {'start': (9, 0),
        'end': (21, 0), },
    3: {'start': (9, 0),
        'end': (21, 0), },
    4: {'start': (9, 0),
        'end': (21, 0), },
    5: {'start': (11, 30),
        'end': (21, 0), },
    6: {'start': (11, 30),
        'end': (21, 0), },
}


def should_turn_on():
    local_time = get_local_time()

    week_day = local_time.weekday()
    hour = local_time.hour
    minute = local_time.minute

    start_hour, start_minute = on_hours_by_day_of_week[week_day]['start']
    end_hour, end_minute = on_hours_by_day_of_week[week_day]['end']

    after_start = (hour == start_hour and minute >= start_minute) or \
                  (hour > start_hour)

    before_end = (hour == end_hour and minute < end_minute) or \
                 (hour < end_hour)

    return after_start and before_end


def turn_intercom_on(is_on: bool):
    global LAST_STATE
    if LAST_STATE is None or LAST_STATE != is_on:
        print('Turning intercom', 'on' if is_on else 'off')

    try:
        payload = {'is_on': is_on}
        payload_data = json.dumps(payload)

        headers = {'Content-Type': 'application/json'}
        r = requests.post(f'http://{INTERCOM_ADDRESS}/set', data=payload_data, headers=headers)

        LAST_STATE = is_on
    except Exception as e:
        print(f'Request error: {e}')


while True:
    turn_intercom_on(should_turn_on())
    time.sleep(SLEEP_DURATION)
